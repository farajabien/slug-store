#!/bin/bash

# Slug Store Core Functionality Test
# Tests working features: URL state, data APIs, encoding, sharing URLs (without email)

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

BASE_URL="http://localhost:3000"
API_BASE="$BASE_URL/api"

success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

error() {
    echo -e "${RED}‚ùå${NC} $1"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

test_count=0
pass_count=0

run_test() {
    local test_name="$1"
    local test_command="$2"
    
    ((test_count++))
    echo -e "\n${BLUE}Test $test_count:${NC} $test_name"
    
    if eval "$test_command"; then
        success "$test_name - PASSED"
        ((pass_count++))
    else
        error "$test_name - FAILED"
    fi
}

echo "========================================================"
echo "üß™ Slug Store v4.0.8 - Core Functionality Tests"
echo "========================================================"

# Test 1: Server availability
run_test "Server connectivity" \
    "curl -s --connect-timeout 5 '$BASE_URL' > /dev/null"

# Test 2: FAQs API
run_test "FAQs API data loading" \
    "curl -s '$API_BASE/faqs' | jq -e '.faqs' > /dev/null"

# Test 3: Use Cases API  
run_test "Use Cases API data loading" \
    "curl -s '$API_BASE/use-cases' | jq -e '.useCases' > /dev/null"

# Test 4: Demo page loading
run_test "Demo page accessibility" \
    "curl -s '$BASE_URL/demo' | grep -q 'slug-store'"

# Test 5: URL state parameter handling
run_test "URL state parameter parsing" \
    "curl -s '$BASE_URL/demo?test=hello' > /dev/null"

# Test 6: Simple URL state loading
simple_state='{"items":[{"name":"Test Item","price":100}]}'
encoded_simple=$(echo "$simple_state" | jq -r @uri)
run_test "Simple URL state loading" \
    "curl -s '$BASE_URL/demo?wishlist=$encoded_simple' | grep -q 'Test Item'"

# Test 7: Complex URL state loading
complex_state='{"items":[{"name":"MacBook Pro","price":2500,"category":"electronics"},{"name":"iPhone","price":999,"category":"electronics"}],"view":"grid","filters":{"category":"electronics"}}'
encoded_complex=$(echo "$complex_state" | jq -r @uri)
run_test "Complex URL state loading" \
    "curl -s '$BASE_URL/demo?wishlist=$encoded_complex' | grep -q 'MacBook Pro'"

# Test 8: Special characters in URL
special_state='{"items":[{"name":"Caf√© & Co. (50% off)","price":25}]}'
encoded_special=$(echo "$special_state" | jq -r @uri)
run_test "Special characters in URL state" \
    "curl -s '$BASE_URL/demo?wishlist=$encoded_special' > /dev/null"

# Test 9: Multiple URL parameters
run_test "Multiple URL parameters" \
    "curl -s '$BASE_URL/demo?wishlist=%7B%22items%22%3A%5B%5D%7D&view=grid&filter=all' > /dev/null"

# Test 10: Large state handling
large_items=""
for i in {1..20}; do
    if [[ $i -gt 1 ]]; then large_items+=","; fi
    large_items+="{\"name\":\"Product $i\",\"price\":$((i*50)),\"category\":\"category$((i%3))\"}"
done
large_state="{\"items\":[$large_items],\"view\":\"list\"}"
encoded_large=$(echo "$large_state" | jq -r @uri)
run_test "Large state URL handling" \
    "curl -s '$BASE_URL/demo?wishlist=$encoded_large' > /dev/null"

# Test 11: Error handling - malformed JSON
run_test "Error handling for malformed parameters" \
    "curl -s '$BASE_URL/demo?wishlist=invalid-json' > /dev/null"

# Test 12: Share API structure (without email sending)
run_test "Share API endpoint availability" \
    "curl -s -X POST -H 'Content-Type: application/json' -d '{}' '$API_BASE/share' | jq -e '.error' > /dev/null"

# Test 13: Share API validation
run_test "Share API input validation" \
    "curl -s -X POST -H 'Content-Type: application/json' -d '{\"email\":\"invalid\",\"state\":{},\"url\":\"\"}' '$API_BASE/share' | jq -e '.error' > /dev/null"

# Test 14: URL state copying simulation
test_url="$BASE_URL/demo?wishlist=$encoded_complex"
run_test "URL state copying capability" \
    "echo '$test_url' | grep -q 'wishlist=' && echo 'URL contains state parameter'"

# Test 15: State data retrieval simulation
run_test "State data retrieval from URL" \
    "echo '$encoded_complex' | python3 -c 'import urllib.parse, sys; print(urllib.parse.unquote(sys.stdin.read().strip()))' | jq -e '.items[0].name' > /dev/null"

echo ""
echo "========================================================"
echo "üìä Test Results Summary"
echo "========================================================"
echo "Total Tests: $test_count"
echo "Passed: $pass_count"
echo "Failed: $((test_count - pass_count))"

if [[ $pass_count -eq $test_count ]]; then
    echo ""
    success "üéâ ALL CORE FUNCTIONALITY TESTS PASSED!"
    echo ""
    echo "‚úÖ URL state management working"
    echo "‚úÖ Data APIs operational"  
    echo "‚úÖ Demo page functional"
    echo "‚úÖ State encoding/decoding working"
    echo "‚úÖ Error handling robust"
    echo "‚úÖ Large state support working"
    echo ""
    echo "üîó Core Slug Store Features:"
    echo "‚Ä¢ Create shareable URLs with state"
    echo "‚Ä¢ Load state from URL parameters"
    echo "‚Ä¢ Handle complex data structures"
    echo "‚Ä¢ Support special characters"
    echo "‚Ä¢ Manage large state objects"
    echo "‚Ä¢ Provide robust error handling"
    echo ""
    echo "üìù Note: Email sharing requires RESEND_API_KEY configuration"
    echo "         but URL sharing functionality works perfectly!"
elif [[ $pass_count -ge $((test_count * 3 / 4)) ]]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  MOSTLY WORKING - Minor issues detected${NC}"
    echo "Core functionality is operational"
else
    echo ""
    error "üö® CRITICAL ISSUES - Core functionality compromised"
fi

echo ""
echo "========================================================"
echo "üîß Slug Store Usage Examples"
echo "========================================================"
echo ""
echo "1. Create a shareable wishlist URL:"
echo "   $BASE_URL/demo?wishlist=%7B%22items%22%3A%5B%7B%22name%22%3A%22iPhone%22%2C%22price%22%3A999%7D%5D%7D"
echo ""
echo "2. Test with your own data:"
echo "   - Visit: $BASE_URL/demo"
echo "   - Add items to wishlist"
echo "   - Copy the URL to share"
echo ""
echo "3. API endpoints:"
echo "   - FAQs: $API_BASE/faqs"
echo "   - Use Cases: $API_BASE/use-cases"
echo ""

exit $((test_count - pass_count)) 