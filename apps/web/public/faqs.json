{
  "faqs": {
    "paradigm_shift": [
      {
        "id": "universal-state-persistence",
        "question": "How does Slug Store provide universal state persistence?",
        "answer": "Slug Store gives you **two powerful options in one package**: 1) **Share via URLs** - state lives in shareable URLs (perfect for dashboards, filters, configurations), 2) **Store in database** - compressed state stored in any database (perfect for user preferences, private data). This eliminates the traditional choice between ephemeral state and database complexity. **One package, two use cases, zero obstruction** - from startup MVPs to enterprise applications.",
        "category": "paradigm",
        "tags": ["universal", "persistence", "dual-purpose", "paradigm-shift"]
      },
      {
        "id": "scaling-architecture",
        "question": "How do I scale from zero-database to enterprise with Slug Store?",
        "answer": "Slug Store scales beautifully: **Small Apps** (100% URL state, zero backend), **Medium Apps** (user auth + URL state, minimal backend), **Enterprise** (user data in DB + complex state in URLs). You start with zero infrastructure and add databases only when you need user management - not for application state. This hybrid approach reduces costs, complexity, and vendor lock-in while maintaining infinite scalability.",
        "category": "paradigm",
        "tags": ["scaling", "architecture", "enterprise", "hybrid"]
      },
      {
        "id": "beyond-traditional-state",
        "question": "What makes URL state different from traditional state management?",
        "answer": "Traditional state is **ephemeral** (lost on refresh), **device-specific** (can't share), and **temporary** (no persistence). Slug Store state is **persistent** (survives refreshes), **cross-device** (works everywhere), **shareable** (via URLs), and **scalable** (no server limits). It's the missing piece between useState/Zustand and full database architectures - giving you persistence without the complexity.",
        "category": "paradigm",
        "tags": ["comparison", "traditional-state", "persistence", "benefits"]
      },
      {
        "id": "enterprise-without-complexity",
        "question": "Can I build enterprise-grade apps without traditional backend complexity?",
        "answer": "Absolutely! Store user authentication in a simple database (Supabase, Auth0), then put **all application state in encrypted URLs**. This gives you: enterprise security (encrypted URLs), audit trails (state history in URLs), team collaboration (share encrypted URLs), compliance (zero data lock-in), and infinite scaling (URLs are infinitely scalable). Fortune 500 complexity with startup simplicity.",
        "category": "paradigm",
        "tags": ["enterprise", "security", "compliance", "simplicity"]
      },
      {
        "id": "unified-package-approach",
        "question": "How does the unified Slug Store package work?",
        "answer": "**One Package, Everything Included**: `@farajabien/slug-store` contains client hooks, server functions, and core encoding - all in one install. **Two Clear Use Cases**: 1) Share state via URLs (dashboards, filters, configurations), 2) Store state in database (user preferences, private data). **Zero Obstruction**: Works with React, Next.js, Supabase, Firebase, PostgreSQL, MongoDB - no configuration needed. Import what you need: everything, client-only, or server-only.",
        "category": "paradigm", 
        "tags": ["unified", "single-package", "architecture", "simplicity"]
      }
    ],
    "getting_started": [
      {
        "id": "what-is-slug-store",
        "question": "What is Slug Store?",
        "answer": "Slug Store is a universal state persistence library with two core use cases: **1) Share state via URLs** - like Excalidraw drawings or Google Docs links, perfect for dashboards and configurations, **2) Store state in database** - compressed user preferences that work with any database (Supabase, Firebase, PostgreSQL, etc.). One package handles both seamlessly.",
        "category": "basics",
        "tags": ["overview", "introduction"]
      },
      {
        "id": "why-use-slug-store",
        "question": "Why should I use Slug Store instead of localStorage or other state management?",
        "answer": "Slug Store offers unique benefits: 1) **Universal persistence** - Share via URLs OR store in database, 2) **Zero configuration** - Works with any database out of the box, 3) **Cross-device sync** - Database storage syncs everywhere, 4) **Instant sharing** - URL state is immediately shareable, 5) **Framework agnostic** - React, Next.js, any backend, 6) **Built-in optimization** - Compression, encryption, TypeScript included.",
        "category": "basics",
        "tags": ["benefits", "comparison"]
      },
      {
        "id": "how-small-are-urls",
        "question": "How big do the URLs get?",
        "answer": "With compression enabled, URLs are typically 30-70% smaller than raw JSON. For example, a complex e-commerce filter state (categories, price ranges, sorting) that's 2KB as JSON becomes ~600 bytes in the URL. Most browsers support URLs up to 2000+ characters, which is plenty for typical app states.",
        "category": "basics",
        "tags": ["performance", "size", "compression"]
      },
      {
        "id": "quick-start",
        "question": "What's the fastest way to get started?",
        "answer": "Install once: `npm install @farajabien/slug-store`. **For React**: Replace `useState` with `useSlugStore` for automatic URL sync. **For Database Storage**: Use `saveUserState()` and `loadUserState()` with any database. **For Sharing**: Use `createShareableUrl()` and `loadFromShareableUrl()`. Everything works out of the box - no configuration needed! Check our live demo at slugstore.fbien.com for examples.",
        "category": "basics",
        "tags": ["installation", "quick-start"]
      }
    ],
    "react_usage": [
      {
        "id": "replace-usestate",
        "question": "How do I replace useState with useSlugStore?",
        "answer": "It's a one-line change! Replace `const [state, setState] = useState(initial)` with `const { state, setState } = useSlugStore(initial, { compress: true })`. The API is identical, but now your state automatically syncs to the URL.",
        "category": "react",
        "tags": ["migration", "hooks"]
      },
      {
        "id": "zustand-like-stores",
        "question": "How do I create Zustand-like stores with URL persistence?",
        "answer": "Use the `create` function: ```tsx\nconst useStore = create((set) => ({\n  items: [],\n  addItem: (item) => set(state => ({ items: [...state.items, item] }))\n}), { compress: true })\n```\nIt works exactly like Zustand but automatically syncs to the URL.",
        "category": "react",
        "tags": ["zustand", "stores", "global-state"]
      },
      {
        "id": "multiple-stores",
        "question": "Can I have multiple stores in the same app?",
        "answer": "Yes! Each store can use a different URL parameter: ```tsx\nconst useCartStore = create(/* ... */, { key: 'cart' })\nconst useFiltersStore = create(/* ... */, { key: 'filters' })\n```\nThis creates URLs like `?cart=...&filters=...`",
        "category": "react",
        "tags": ["multiple-stores", "url-parameters"]
      },
      {
        "id": "performance-optimization",
        "question": "How do I optimize performance for frequent state updates?",
        "answer": "Use debouncing: `useSlugStore(state, { debounceMs: 300 })`. This batches URL updates and prevents excessive browser history entries. For high-frequency updates (like canvas drawing), consider `syncToUrl: false` and manual syncing.",
        "category": "react",
        "tags": ["performance", "debouncing", "optimization"]
      },
      {
        "id": "database-storage",
        "question": "How do I store user state in my database?",
        "answer": "Use the built-in database functions: ```tsx\nimport { saveUserState, loadUserState } from '@farajabien/slug-store'\n\n// Save to any database\nconst { slug } = await saveUserState(userPreferences)\nawait supabase.from('profiles').update({ app_state: slug }).eq('id', userId)\n// or Firebase: await db.collection('users').doc(userId).update({ appState: slug })\n// or SQL: await db.query('UPDATE users SET app_state = ? WHERE id = ?', [slug, userId])\n\n// Load from database\nconst { data } = await supabase.from('profiles').select('app_state').eq('id', userId).single()\nconst userPrefs = await loadUserState(data.app_state)\n```",
        "category": "react",
        "tags": ["database", "storage", "supabase", "firebase"]
      }
    ],
    "use_cases": [
      {
        "id": "ecommerce-filters",
        "question": "How do I implement shareable e-commerce filters?",
        "answer": "Perfect use case! Store filters, sorting, and pagination in state: ```tsx\nconst { state, setState } = useSlugStore({\n  category: 'all',\n  priceRange: [0, 1000],\n  sortBy: 'price',\n  page: 1\n}, { compress: true })\n```\nUsers can bookmark filtered results and share product discoveries.",
        "category": "use-cases",
        "tags": ["ecommerce", "filters", "shopping"]
      },
      {
        "id": "dashboard-layouts",
        "question": "Can I save dashboard layouts and configurations?",
        "answer": "Absolutely! Store widget positions, chart configurations, date ranges: ```tsx\nconst useDashboard = create((set) => ({\n  widgets: ['sales', 'users', 'revenue'],\n  layout: 'grid',\n  dateRange: { start: '2024-01-01', end: '2024-12-31' },\n  setLayout: (layout) => set({ layout })\n}), { key: 'dashboard' })\n```",
        "category": "use-cases",
        "tags": ["dashboard", "layout", "configuration"]
      },
      {
        "id": "ai-chat-apps",
        "question": "How do I make AI chat conversations shareable?",
        "answer": "Store conversation history and settings: ```tsx\nconst useChatStore = create((set) => ({\n  messages: [],\n  model: 'gpt-4',\n  temperature: 0.7,\n  systemPrompt: 'You are a helpful assistant'\n}), { encrypt: true, password: userSessionKey })\n```\nUse encryption for sensitive conversations.",
        "category": "use-cases",
        "tags": ["ai", "chat", "conversations", "gpt"]
      },
      {
        "id": "design-tools",
        "question": "Can I build something like Excalidraw with shareable canvases?",
        "answer": "Yes! Store canvas elements, zoom, pan, and tool settings: ```tsx\nconst useCanvasStore = create((set) => ({\n  elements: [],\n  zoom: 1,\n  pan: { x: 0, y: 0 },\n  selectedTool: 'rectangle',\n  addElement: (el) => set(state => ({ elements: [...state.elements, el] }))\n}), { compress: true, debounceMs: 500 })\n```",
        "category": "use-cases",
        "tags": ["design", "canvas", "excalidraw", "drawing"]
      },
      {
        "id": "todo-apps",
        "question": "How do I make todo lists shareable and collaborative?",
        "answer": "Store todos, filters, and views: ```tsx\nconst useTodoStore = create((set) => ({\n  todos: [],\n  filter: 'all', // 'all', 'active', 'completed'\n  view: 'list',\n  addTodo: (text) => set(state => ({ \n    todos: [...state.todos, { id: Date.now(), text, done: false }] \n  }))\n}), { compress: true })\n```\nUsers can share filtered views or specific todo lists.",
        "category": "use-cases",
        "tags": ["todo", "tasks", "productivity"]
      }
    ],
    "security": [
      {
        "id": "is-url-state-secure",
        "question": "Is it safe to put state in URLs?",
        "answer": "For non-sensitive data, yes! URLs are visible in browser history, server logs, and can be shared. For sensitive data, use encryption: `useSlugStore(state, { encrypt: true, password: userKey })`. This uses Web Crypto API for client-side encryption.",
        "category": "security",
        "tags": ["safety", "encryption", "privacy"]
      },
      {
        "id": "what-to-encrypt",
        "question": "What data should I encrypt?",
        "answer": "Encrypt: user IDs, personal info, private settings, API keys, sensitive filters. Don't encrypt: public filters, UI preferences, non-sensitive app state. Remember: encryption adds ~30% to URL length and requires password management.",
        "category": "security",
        "tags": ["encryption", "best-practices", "data-sensitivity"]
      },
      {
        "id": "password-management",
        "question": "How do I manage encryption passwords?",
        "answer": "Common patterns: 1) **User session key** - derive from login token, 2) **App-specific key** - hardcoded for internal tools, 3) **User-provided** - let users set passwords for shared states. Never put passwords in URLs!",
        "category": "security",
        "tags": ["passwords", "encryption", "session-management"]
      }
    ],
    "technical": [
      {
        "id": "browser-compatibility",
        "question": "Which browsers are supported?",
        "answer": "All modern browsers! Uses standard Web APIs: URL/URLSearchParams (IE11+), Web Crypto API for encryption (Chrome 37+, Firefox 34+, Safari 7+). For older browsers, encryption features gracefully degrade to compression-only.",
        "category": "technical",
        "tags": ["compatibility", "browsers", "support"]
      },
      {
        "id": "url-length-limits",
        "question": "What are the URL length limits?",
        "answer": "Practical limits: Chrome (2MB), Firefox (65k), Safari (80k), IE (2k). Most browsers support 2000+ characters safely. With compression, you can fit substantial app state. For very large states, consider splitting across multiple URL parameters.",
        "category": "technical",
        "tags": ["limits", "url-length", "browsers"]
      },
      {
        "id": "ssr-compatibility",
        "question": "Does it work with server-side rendering?",
        "answer": "Yes! The React hooks handle SSR properly - they check `typeof window` and only sync to URL on the client. Initial state loads from URL during hydration. No SSR-specific configuration needed.",
        "category": "technical",
        "tags": ["ssr", "nextjs", "hydration", "server-rendering"]
      },
      {
        "id": "bundle-size",
        "question": "How much does it add to my bundle?",
        "answer": "Core package: ~15KB minified. React package: additional ~5KB. Only dependency is lz-string for compression. Tree-shakeable - only import what you use. Much smaller than most state management libraries.",
        "category": "technical",
        "tags": ["bundle-size", "performance", "dependencies"]
      },
      {
        "id": "typescript-support",
        "question": "Is TypeScript fully supported?",
        "answer": "Yes! Full TypeScript support with comprehensive type definitions. IntelliSense works perfectly. Generic hooks preserve your state types: `useSlugStore<MyStateType>(initialState)`. No additional @types packages needed.",
        "category": "technical",
        "tags": ["typescript", "types", "intellisense"]
      }
    ],
    "frameworks": [
      {
        "id": "vue-support",
        "question": "When will Vue support be available?",
        "answer": "Vue package is planned for Q1 2025. Meanwhile, you can use the core package with Vue's reactivity system. The API will be similar to Vue's `ref` and `reactive`.",
        "category": "frameworks",
        "tags": ["vue", "roadmap", "coming-soon"]
      },
      {
        "id": "angular-support",
        "question": "What about Angular support?",
        "answer": "Angular package is in planning for Q2 2025. Will integrate with Angular's service injection and observables. You can use the core package with Angular services today.",
        "category": "frameworks",
        "tags": ["angular", "roadmap", "services"]
      },
      {
        "id": "svelte-support",
        "question": "Will there be Svelte support?",
        "answer": "Svelte package is planned for Q2 2025. Will use Svelte stores pattern for seamless integration. The core package works with Svelte's reactive statements today.",
        "category": "frameworks",
        "tags": ["svelte", "roadmap", "stores"]
      },
      {
        "id": "vanilla-js",
        "question": "Can I use it with vanilla JavaScript?",
        "answer": "Absolutely! The core package is framework-agnostic: ```js\nimport { encodeState, decodeState } from '@farajabien/slug-store-core'\n\n// Manual URL management\nconst state = { items: [] }\nconst slug = await encodeState(state)\nwindow.history.replaceState({}, '', `?state=${slug}`)\n```",
        "category": "frameworks",
        "tags": ["vanilla", "no-framework", "javascript"]
      }
    ],
    "troubleshooting": [
      {
        "id": "state-not-syncing",
        "question": "Why isn't my state syncing to the URL?",
        "answer": "Check: 1) Is `syncToUrl: true` (default)? 2) Are you on the client side? 3) Is the state actually changing (use `Object.is` comparison)? 4) Check browser console for errors. 5) Try without compression/encryption first.",
        "category": "troubleshooting",
        "tags": ["sync-issues", "debugging"]
      },
      {
        "id": "url-too-long",
        "question": "My URLs are getting too long. What can I do?",
        "answer": "Solutions: 1) Enable compression: `{ compress: true }`, 2) Split large state into multiple stores with different keys, 3) Store only essential state in URL, keep UI state local, 4) Use shorter property names in your state objects.",
        "category": "troubleshooting",
        "tags": ["url-length", "optimization"]
      },
      {
        "id": "encryption-errors",
        "question": "I'm getting encryption/decryption errors. How to fix?",
        "answer": "Common causes: 1) Password mismatch between encode/decode, 2) Browser doesn't support Web Crypto API, 3) HTTPS required for some crypto features, 4) Password changed between sessions. Always handle decryption errors gracefully with fallbacks.",
        "category": "troubleshooting",
        "tags": ["encryption", "errors", "debugging"]
      },
      {
        "id": "performance-issues",
        "question": "The app feels slow with URL state. How to optimize?",
        "answer": "Optimizations: 1) Add debouncing: `{ debounceMs: 300 }`, 2) Disable auto-sync for high-frequency updates: `{ syncToUrl: false }`, 3) Use compression: `{ compress: true }`, 4) Minimize state object size, 5) Consider splitting into multiple smaller stores.",
        "category": "troubleshooting",
        "tags": ["performance", "optimization", "slow"]
      }
    ],
    "migration": [
      {
        "id": "from-zustand",
        "question": "How do I migrate from Zustand?",
        "answer": "Easy! Replace `import { create } from 'zustand'` with `import { create } from '@farajabien/slug-store'`. Add options for persistence: `create(storeFunction, { compress: true })` for URL sharing or use `saveUserState()` for database storage. Your existing store logic stays the same - just add powerful persistence!",
        "category": "migration",
        "tags": ["zustand", "migration", "stores"]
      },
      {
        "id": "from-usestate",
        "question": "How do I migrate from useState?",
        "answer": "Replace `const [state, setState] = useState(initial)` with `const { state, setState } = useSlugStore(initial)`. The setter API is identical - supports both direct values and updater functions.",
        "category": "migration",
        "tags": ["usestate", "hooks", "migration"]
      },
      {
        "id": "from-redux",
        "question": "Can I migrate from Redux?",
        "answer": "Yes, but it's a bigger change. Redux's single store maps well to our `create` function. You'll need to: 1) Convert reducers to setter functions, 2) Replace `useSelector` with direct store access, 3) Remove action creators. The result is much simpler!",
        "category": "migration",
        "tags": ["redux", "migration", "refactoring"]
      },
      {
        "id": "gradual-migration",
        "question": "Can I migrate gradually?",
        "answer": "Absolutely! Start with new features using Slug Store, then gradually migrate existing state. Both can coexist. You can even sync between them if needed. No need for a big rewrite.",
        "category": "migration",
        "tags": ["gradual", "incremental", "coexistence"]
      }
    ]
  },
  "meta": {
    "version": "2.0.0",
    "lastUpdated": "2024-12-27",
    "totalQuestions": 42,
    "categories": [
      "paradigm_shift",
      "getting_started",
      "react_usage", 
      "use_cases",
      "security",
      "technical",
      "frameworks",
      "troubleshooting",
      "migration"
    ]
  }
} 