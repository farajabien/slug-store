{
  "useCases": {
    "paradigm_examples": [
      {
        "id": "supabase-user-state",
        "title": "Database User State (No URL Required)",
        "description": "Store user app state directly in database profiles. Perfect for Supabase, Firebase, or any user table. Zero URL pollution.",
        "stateExample": {
          "userPreferences": {"theme": "dark", "language": "en", "notifications": true},
          "appData": {"dashboardLayout": "grid", "favoriteProjects": ["proj-1", "proj-2"]},
          "workspaceSettings": {"activeTab": "analytics", "filters": {"status": "active"}},
          "personalData": {"onboardingComplete": true, "lastVisited": "2025-01-15"}
        },
        "implementation": {
          "supabase": "// Single package install: npm install @farajabien/slug-store\nimport { useSlugStore } from '@farajabien/slug-store'\n\n// 1. Store in user profile (React component)\nfunction UserProfile() {\n  const [userState, setUserState, { isLoading, error }] = useSlugStore('user-profile', {\n    theme: 'dark', \n    preferences: { notifications: true },\n    dashboardLayout: 'grid'\n  }, {\n    db: { \n      endpoint: '/api/user/profile',\n      method: 'PUT'\n    }\n  })\n  \n  if (isLoading) return <div>Loading profile...</div>\n  if (error) return <div>Error: {error.message}</div>\n  \n  return (\n    <div>\n      <button onClick={() => setUserState({ ...userState, theme: 'light' })}>\n        Toggle Theme\n      </button>\n    </div>\n  )\n}",
          "benefits": ["No URL pollution", "Private user data", "Cross-device sync", "Works with ANY database", "Single package install"]
        },
        "tags": ["database", "supabase", "user-state", "private"],
        "difficulty": "beginner",
        "realWorldExamples": ["User preferences", "Dashboard layouts", "Personal settings", "App state"]
      },
      {
        "id": "zero-database-startup",
        "title": "Zero-Database Startup MVP",
        "description": "Launch a complete SaaS MVP with zero backend infrastructure - all state persists in URLs.",
        "stateExample": {
          "userOnboarding": {"step": 3, "preferences": {"theme": "dark", "notifications": true}},
          "projectData": {"name": "My Startup", "features": ["auth", "dashboard", "billing"]},
          "workflows": [{"id": "1", "name": "User Registration", "steps": ["signup", "verify", "onboard"]}],
          "settings": {"plan": "free", "limits": {"projects": 1, "users": 10}}
        },
        "implementation": {
          "react": "// Complete SaaS app with ONE package install\nimport { useSlugStore } from '@farajabien/slug-store'\n\nfunction SaaSApp() {\n  const [state, setState, { isLoading, error }] = useSlugStore('saas-app', {\n    user: { name: '', email: '', plan: 'free' },\n    onboarding: { step: 1, completed: false },\n    projects: [],\n    currentProject: null,\n    workflows: []\n  }, {\n    url: true,        // All state in URLs\n    compress: true    // Compress for smaller URLs\n  })\n  \n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  \n  const createProject = (name) => {\n    setState({\n      ...state,\n      projects: [...state.projects, {\n        id: Date.now(),\n        name,\n        createdAt: new Date().toISOString()\n      }]\n    })\n  }\n  \n  const upgradeToProPlan = () => {\n    setState({ \n      ...state,\n      user: { ...state.user, plan: 'pro' } \n    })\n  }\n  \n  return <div>{/* Your SaaS UI */}</div>\n}",
          "benefits": ["Single package install", "Zero hosting costs", "Instant deployment", "Global CDN delivery", "No vendor lock-in"]
        },
        "tags": ["startup", "mvp", "zero-backend", "saas"],
        "difficulty": "beginner",
        "realWorldExamples": ["Product Hunt submissions", "Hackathon projects", "Landing page builders"]
      },
      {
        "id": "hybrid-architecture",
        "title": "Hybrid Architecture: Auth + URL State",
        "description": "Scale to millions of users with minimal backend - user auth in database, all app state in URLs.",
        "stateExample": {
          "workspace": {"id": "team-123", "name": "Acme Corp", "plan": "enterprise"},
          "dashboard": {"widgets": ["metrics", "users", "revenue"], "layout": "grid"},
          "filters": {"dateRange": "last-30-days", "segments": ["new-users", "power-users"]},
          "collaboration": {"activeUsers": ["john", "jane"], "comments": []}
        },
        "implementation": {
          "react": "// Hybrid approach: Simple auth + powerful state persistence\nimport { useSlugStore } from '@farajabien/slug-store'\n\nfunction WorkspaceApp() {\n  const [workspace, setWorkspace, { isLoading, error }] = useSlugStore('workspace', {\n    name: '',\n    settings: {},\n    dashboard: { widgets: [], layout: 'grid' },\n    filters: { dateRange: 'last-7-days' }\n  }, {\n    url: true,        // Infinitely scalable URLs\n    compress: true,   // Compress complex state\n    // User auth handled separately by your auth provider\n  })\n  \n  if (isLoading) return <div>Loading workspace...</div>\n  if (error) return <div>Error: {error.message}</div>\n  \n  const updateDashboard = (widgets) => {\n    setWorkspace({\n      ...workspace,\n      dashboard: { ...workspace.dashboard, widgets }\n    })\n  }\n  \n  const shareWorkspace = () => {\n    // URL is already shareable!\n    navigator.clipboard.writeText(window.location.href)\n  }\n  \n  return <div>{/* Your workspace UI */}</div>\n}",
          "benefits": ["Single package simplicity", "Minimal database usage", "Instant state sharing", "Team collaboration", "Automatic backups via URLs"]
        },
        "tags": ["hybrid", "scale", "team", "enterprise"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Notion workspaces", "Figma files", "Linear projects"]
      },
      {
        "id": "enterprise-scale",
        "title": "Enterprise-Scale Application",
        "description": "Fortune 500 ready - user management in database, complex business state in compressed URLs.",
        "stateExample": {
          "organization": {"id": "org-456", "departments": ["engineering", "sales", "marketing"]},
          "businessProcess": {
            "approvalChain": ["manager", "director", "vp"],
            "workflow": {"stage": "review", "assignees": ["john.doe", "jane.smith"]},
            "documents": [{"id": "doc-1", "version": "2.1", "status": "pending"}]
          },
          "compliance": {"regulations": ["SOX", "GDPR"], "audits": ["2025-Q1", "2025-Q2"]},
          "reporting": {"metrics": ["revenue", "costs"], "timeframe": "quarterly"}
        },
        "implementation": {
          "react": "// Enterprise-grade state management\nimport { useSlugStore } from '@farajabien/slug-store'\n\nfunction EnterpriseApp() {\n  const [enterprise, setEnterprise, { isLoading, error }] = useSlugStore('enterprise', {\n    organization: { departments: [], policies: [] },\n    processes: { approvals: [], workflows: [] },\n    compliance: { regulations: [], audits: [] }\n  }, {\n    url: true,\n    compress: true,\n    debounceMs: 500   // Handle high-frequency updates\n  })\n  \n  if (isLoading) return <div>Loading enterprise data...</div>\n  if (error) return <div>Error: {error.message}</div>\n  \n  const initiateApproval = (request) => {\n    setEnterprise({\n      ...enterprise,\n      processes: {\n        ...enterprise.processes,\n        approvals: [...enterprise.processes.approvals, {\n          id: Date.now(),\n          request,\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }]\n      }\n    })\n  }\n  \n  const shareSecureState = () => {\n    // URLs are automatically shareable with enterprise security\n    navigator.clipboard.writeText(window.location.href)\n  }\n  \n  return <div>{/* Your enterprise UI */}</div>\n}",
          "benefits": ["Enterprise security", "Audit trails in URLs", "Zero data lock-in", "Infinite scalability", "Compliance-ready"]
        },
        "tags": ["enterprise", "compliance", "security", "audit"],
        "difficulty": "advanced",
        "realWorldExamples": ["Salesforce configurations", "SAP workflows", "Microsoft 365 settings"]
      }
    ],
    "design_tools": [
      {
        "id": "excalidraw-clone",
        "title": "Excalidraw-like Drawing App",
        "description": "Build a collaborative whiteboard where users can share drawings, diagrams, and sketches via URL.",
        "stateExample": {
          "elements": [
            {"id": "1", "type": "rectangle", "x": 100, "y": 100, "width": 200, "height": 150},
            {"id": "2", "type": "text", "x": 120, "y": 160, "text": "My Diagram"}
          ],
          "viewport": {"zoom": 1.2, "pan": {"x": -50, "y": -30}},
          "selectedTool": "arrow",
          "selectedElements": ["1"],
          "theme": "light"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction CanvasApp() {\n  const [canvas, setCanvas, { isLoading }] = useSlugStore('canvas', {\n    elements: [],\n    viewport: { zoom: 1, pan: { x: 0, y: 0 } },\n    selectedTool: 'select'\n  }, {\n    url: true,\n    compress: true,\n    debounceMs: 300   // Smooth updates for drawing\n  })\n  \n  if (isLoading) return <div>Loading canvas...</div>\n  \n  const addElement = (element) => {\n    setCanvas({\n      ...canvas,\n      elements: [...canvas.elements, element]\n    })\n  }\n  \n  const updateViewport = (viewport) => {\n    setCanvas({ ...canvas, viewport })\n  }\n  \n  return <div>{/* Your canvas UI */}</div>\n}",
          "benefits": ["Single package install", "Instant sharing of drawings", "Bookmark complex diagrams", "Collaborative whiteboarding"]
        },
        "tags": ["design", "collaboration", "canvas", "drawing"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Excalidraw", "Figma links", "Miro boards"]
      },
      {
        "id": "eraser-clone",
        "title": "Eraser.io Architecture Diagrams",
        "description": "Create shareable system architecture diagrams with components, connections, and documentation.",
        "stateExample": {
          "nodes": [
            {"id": "api", "type": "service", "label": "API Gateway", "x": 200, "y": 100},
            {"id": "db", "type": "database", "label": "PostgreSQL", "x": 200, "y": 300}
          ],
          "edges": [{"from": "api", "to": "db", "label": "queries"}],
          "layout": "auto",
          "theme": "dark"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction DiagramApp() {\n  const [diagram, setDiagram] = useSlugStore('diagram', {\n    nodes: [],\n    edges: [],\n    layout: 'manual'\n  }, {\n    url: true,\n    compress: true\n  })\n  \n  const addNode = (node) => {\n    setDiagram({\n      ...diagram,\n      nodes: [...diagram.nodes, node]\n    })\n  }\n  \n  const connectNodes = (from, to, label) => {\n    setDiagram({\n      ...diagram,\n      edges: [...diagram.edges, { from, to, label }]\n    })\n  }\n  \n  return <div>{/* Your diagram UI */}</div>\n}",
          "benefits": ["Share architecture diagrams", "Document system designs", "Review and iterate", "Embed in documentation"]
        },
        "tags": ["architecture", "diagrams", "documentation", "systems"],
        "difficulty": "advanced",
        "realWorldExamples": ["Eraser.io", "Draw.io", "Lucidchart"]
      }
    ],
    "ecommerce": [
      {
        "id": "product-filters",
        "title": "E-commerce Product Filters",
        "description": "Let customers bookmark and share specific product searches with applied filters.",
        "stateExample": {
          "category": "electronics",
          "brands": ["Apple", "Samsung"],
          "priceRange": [200, 1000],
          "inStock": true,
          "sortBy": "price-asc",
          "page": 1,
          "viewMode": "grid"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction ProductFilters() {\n  const [filters, setFilters, { isLoading }] = useSlugStore('product-filters', {\n    category: 'all',\n    brands: [],\n    priceRange: [0, 5000],\n    inStock: false,\n    sortBy: 'relevance'\n  }, {\n    url: true,\n    compress: true\n  })\n  \n  if (isLoading) return <div>Loading filters...</div>\n  \n  const setCategory = (category) => {\n    setFilters({ ...filters, category })\n  }\n  \n  const toggleBrand = (brand) => {\n    setFilters({\n      ...filters,\n      brands: filters.brands.includes(brand)\n        ? filters.brands.filter(b => b !== brand)\n        : [...filters.brands, brand]\n    })\n  }\n  \n  return <div>{/* Your filter UI */}</div>\n}",
          "benefits": ["Single package install", "Shareable product searches", "Bookmark favorite filters", "SEO-friendly URLs"]
        },
        "tags": ["ecommerce", "filters", "shopping", "search"],
        "difficulty": "beginner",
        "realWorldExamples": ["Amazon filters", "eBay search", "Shopify stores"]
      },
      {
        "id": "shopping-cart",
        "title": "Persistent Shopping Cart",
        "description": "Shopping cart that persists across devices and can be shared with others.",
        "stateExample": {
          "items": [
            {"id": "123", "name": "iPhone 15", "price": 999, "quantity": 1},
            {"id": "456", "name": "AirPods Pro", "price": 249, "quantity": 2}
          ],
          "total": 1497,
          "currency": "USD",
          "promoCode": "SAVE10"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction ShoppingCart() {\n  const [cart, setCart] = useSlugStore('cart', {\n    items: [],\n    promoCode: null\n  }, {\n    url: true,\n    compress: true\n  })\n  \n  const addItem = (item) => {\n    setCart({\n      ...cart,\n      items: [...cart.items, { ...item, quantity: 1 }]\n    })\n  }\n  \n  const removeItem = (id) => {\n    setCart({\n      ...cart,\n      items: cart.items.filter(item => item.id !== id)\n    })\n  }\n  \n  const getTotal = () => {\n    return cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0)\n  }\n  \n  return <div>{/* Your cart UI */}</div>\n}",
          "benefits": ["Cross-device cart sync", "Share cart with family", "Recover abandoned carts", "Guest checkout persistence"]
        },
        "tags": ["ecommerce", "cart", "persistence", "sharing"],
        "difficulty": "beginner",
        "realWorldExamples": ["Amazon cart", "Shopify checkout", "WooCommerce"]
      }
    ],
    "productivity": [
      {
        "id": "todo-app",
        "title": "Advanced Todo List",
        "description": "Feature-rich todo app with filters, projects, and shareable lists.",
        "stateExample": {
          "todos": [
            {"id": "1", "text": "Buy groceries", "done": false, "project": "personal", "priority": "high"},
            {"id": "2", "text": "Review PR", "done": true, "project": "work", "priority": "medium"}
          ],
          "filter": "active",
          "selectedProject": "work",
          "view": "list",
          "sortBy": "priority"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction TodoApp() {\n  const [todos, setTodos] = useSlugStore('todos', {\n    items: [],\n    filter: 'all', // 'all', 'active', 'completed'\n    selectedProject: null\n  }, {\n    url: true,\n    compress: true\n  })\n  \n  const addTodo = (text, project = 'inbox') => {\n    setTodos({\n      ...todos,\n      items: [...todos.items, {\n        id: Date.now().toString(),\n        text,\n        project,\n        done: false,\n        priority: 'medium',\n        createdAt: new Date().toISOString()\n      }]\n    })\n  }\n  \n  const toggleTodo = (id) => {\n    setTodos({\n      ...todos,\n      items: todos.items.map(todo => \n        todo.id === id ? { ...todo, done: !todo.done } : todo\n      )\n    })\n  }\n  \n  return <div>{/* Your todo UI */}</div>\n}",
          "benefits": ["Share project lists", "Collaborate on tasks", "Bookmark filtered views", "Cross-device sync"]
        },
        "tags": ["productivity", "tasks", "collaboration", "organization"],
        "difficulty": "beginner",
        "realWorldExamples": ["Todoist", "Any.do", "Microsoft To Do"]
      },
      {
        "id": "kanban-board",
        "title": "Kanban Project Board",
        "description": "Trello-like kanban board with shareable project states and team collaboration.",
        "stateExample": {
          "columns": [
            {"id": "todo", "title": "To Do", "cards": ["card1", "card2"]},
            {"id": "doing", "title": "In Progress", "cards": ["card3"]},
            {"id": "done", "title": "Done", "cards": ["card4"]}
          ],
          "cards": {
            "card1": {"id": "card1", "title": "Design homepage", "assignee": "john"},
            "card2": {"id": "card2", "title": "Setup database", "assignee": "jane"}
          },
          "selectedCard": null,
          "teamMembers": ["john", "jane", "bob"]
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction KanbanBoard() {\n  const [board, setBoard] = useSlugStore('kanban-board', {\n    columns: [\n      { id: 'todo', title: 'To Do', cards: [] },\n      { id: 'doing', title: 'In Progress', cards: [] },\n      { id: 'done', title: 'Done', cards: [] }\n    ],\n    cards: {}\n  }, {\n    url: true,\n    compress: true\n  })\n  \n  const addCard = (columnId, title) => {\n    const cardId = Date.now().toString()\n    setBoard({\n      ...board,\n      cards: { ...board.cards, [cardId]: { id: cardId, title } },\n      columns: board.columns.map(col => \n        col.id === columnId \n          ? { ...col, cards: [...col.cards, cardId] }\n          : col\n      )\n    })\n  }\n  \n  return <div>{/* Your kanban UI */}</div>\n}",
          "benefits": ["Share project boards", "Team collaboration", "Save board snapshots", "Project templates"]
        },
        "tags": ["productivity", "kanban", "project-management", "collaboration"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Trello", "Notion Kanban", "GitHub Projects"]
      }
    ],
    "ai_apps": [
      {
        "id": "chatgpt-wrapper",
        "title": "AI Chat Interface",
        "description": "Custom ChatGPT-like interface with shareable conversations and custom prompts.",
        "stateExample": {
          "messages": [
            {"id": "1", "role": "user", "content": "Explain React hooks"},
            {"id": "2", "role": "assistant", "content": "React hooks are functions that..."}
          ],
          "model": "gpt-4",
          "temperature": 0.7,
          "systemPrompt": "You are a helpful coding assistant",
          "conversationTitle": "React Discussion"
        },
        "implementation": {
          "react": "import { useSlugStore } from '@farajabien/slug-store'\n\nfunction ChatApp() {\n  const [chat, setChat] = useSlugStore('ai-chat', {\n    messages: [],\n    model: 'gpt-3.5-turbo',\n    temperature: 0.7,\n    systemPrompt: 'You are a helpful assistant'\n  }, {\n    url: true,\n    compress: true\n    // Note: Consider encryption for sensitive conversations\n  })\n  \n  const addMessage = (message) => {\n    setChat({\n      ...chat,\n      messages: [...chat.messages, { ...message, id: Date.now() }]\n    })\n  }\n  \n  const updateSettings = (settings) => {\n    setChat({ ...chat, ...settings })\n  }\n  \n  const clearChat = () => {\n    setChat({ ...chat, messages: [] })\n  }\n  \n  return <div>{/* Your chat UI */}</div>\n}",
          "benefits": ["Single package install", "Share AI conversations", "Save chat templates", "Collaborate on prompts"]
        },
        "tags": ["ai", "chat", "gpt", "conversations"],
        "difficulty": "intermediate",
        "realWorldExamples": ["ChatGPT", "Claude", "Perplexity"]
      },
      {
        "id": "prompt-playground",
        "title": "AI Prompt Engineering Tool",
        "description": "Tool for testing and sharing AI prompts with different parameters and models.",
        "stateExample": {
          "prompt": "Write a product description for",
          "variables": {"product": "wireless headphones", "brand": "TechCorp"},
          "models": ["gpt-4", "claude-3"],
          "parameters": {"temperature": 0.8, "maxTokens": 150},
          "results": [
            {"model": "gpt-4", "output": "Introducing TechCorp wireless headphones..."}
          ]
        },
        "implementation": {
          "react": "const usePromptStore = create((set) => ({\n  prompt: '',\n  variables: {},\n  selectedModels: ['gpt-3.5-turbo'],\n  parameters: { temperature: 0.7, maxTokens: 100 },\n  results: [],\n  updatePrompt: (prompt) => set({ prompt }),\n  addVariable: (key, value) => set(state => ({\n    variables: { ...state.variables, [key]: value }\n  })),\n  runPrompt: async () => {\n    // API calls to different models\n  }\n}), { compress: true, key: 'prompt' })",
          "benefits": ["Share prompt templates", "Compare model outputs", "Collaborate on prompts", "Save successful patterns"]
        },
        "tags": ["ai", "prompts", "testing", "comparison"],
        "difficulty": "advanced",
        "realWorldExamples": ["OpenAI Playground", "Anthropic Console", "PromptBase"]
      }
    ],
    "dashboards": [
      {
        "id": "analytics-dashboard",
        "title": "Analytics Dashboard",
        "description": "Customizable dashboard with widgets, date ranges, and shareable views.",
        "stateExample": {
          "widgets": ["sales", "traffic", "conversion", "revenue"],
          "layout": "grid",
          "dateRange": {"start": "2025-01-01", "end": "2025-12-31"},
          "filters": {"country": "US", "source": "organic"},
          "refreshInterval": 300
        },
        "implementation": {
          "react": "const useDashboardStore = create((set) => ({\n  widgets: ['sales', 'users', 'revenue'],\n  layout: 'grid', // 'grid', 'list', 'masonry'\n  dateRange: { start: '2025-01-01', end: '2025-12-31' },\n  filters: {},\n  refreshInterval: 60,\n  addWidget: (widget) => set(state => ({\n    widgets: [...state.widgets, widget]\n  })),\n  removeWidget: (widget) => set(state => ({\n    widgets: state.widgets.filter(w => w !== widget)\n  })),\n  updateDateRange: (range) => set({ dateRange: range })\n}), { compress: true, key: 'dashboard' })",
          "benefits": ["Share dashboard configs", "Bookmark reports", "Template dashboards", "Collaborate on insights"]
        },
        "tags": ["analytics", "dashboard", "widgets", "reporting"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Google Analytics", "Mixpanel", "Tableau"]
      },
      {
        "id": "admin-panel",
        "title": "SaaS Admin Panel",
        "description": "Admin interface with user management, settings, and customizable views.",
        "stateExample": {
          "currentPage": "users",
          "userFilters": {"role": "admin", "status": "active"},
          "selectedUsers": ["user1", "user2"],
          "viewMode": "table",
          "sidebarCollapsed": false,
          "theme": "dark"
        },
        "implementation": {
          "react": "const useAdminStore = create((set) => ({\n  currentPage: 'dashboard',\n  userFilters: { role: 'all', status: 'all' },\n  selectedItems: [],\n  viewMode: 'table',\n  sidebarCollapsed: false,\n  navigateToPage: (page) => set({ currentPage: page }),\n  updateFilters: (filters) => set(state => ({\n    userFilters: { ...state.userFilters, ...filters }\n  })),\n  toggleSidebar: () => set(state => ({\n    sidebarCollapsed: !state.sidebarCollapsed\n  }))\n}), { compress: true, key: 'admin' })",
          "benefits": ["Share admin views", "Bookmark filtered lists", "Save workspace layouts", "Team collaboration"]
        },
        "tags": ["admin", "saas", "management", "interface"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Stripe Dashboard", "Firebase Console", "AWS Console"]
      }
    ],
    "one_person_apps": [
      {
        "id": "personal-finance",
        "title": "Personal Finance Tracker",
        "description": "Track expenses, budgets, and financial goals with shareable reports.",
        "stateExample": {
          "transactions": [
            {"id": "1", "amount": -45.99, "category": "food", "date": "2025-01-15"},
            {"id": "2", "amount": 3000, "category": "salary", "date": "2025-01-01"}
          ],
          "budgets": {"food": 400, "entertainment": 200},
          "dateRange": {"start": "2025-01-01", "end": "2025-01-31"},
          "view": "monthly"
        },
        "implementation": {
          "react": "const useFinanceStore = create((set) => ({\n  transactions: [],\n  budgets: {},\n  categories: ['food', 'transport', 'entertainment', 'utilities'],\n  view: 'monthly',\n  addTransaction: (transaction) => set(state => ({\n    transactions: [...state.transactions, {\n      ...transaction,\n      id: Date.now().toString(),\n      date: new Date().toISOString()\n    }]\n  })),\n  setBudget: (category, amount) => set(state => ({\n    budgets: { ...state.budgets, [category]: amount }\n  }))\n}), { encrypt: true, password: userKey, key: 'finance' })",
          "benefits": ["Private financial data", "Share expense reports", "Cross-device sync", "Backup financial data"]
        },
        "tags": ["finance", "personal", "budgeting", "expenses"],
        "difficulty": "beginner",
        "realWorldExamples": ["Mint", "YNAB", "Personal Capital"]
      },
      {
        "id": "habit-tracker",
        "title": "Habit Tracking App",
        "description": "Track daily habits, streaks, and personal goals with visual progress.",
        "stateExample": {
          "habits": [
            {"id": "1", "name": "Exercise", "streak": 7, "goal": "daily"},
            {"id": "2", "name": "Read", "streak": 3, "goal": "daily"}
          ],
          "completions": {
            "2025-01-15": {"1": true, "2": true},
            "2025-01-14": {"1": false, "2": true}
          },
          "view": "week"
        },
        "implementation": {
          "react": "const useHabitStore = create((set, get) => ({\n  habits: [],\n  completions: {},\n  view: 'week',\n  addHabit: (name, goal = 'daily') => set(state => ({\n    habits: [...state.habits, {\n      id: Date.now().toString(),\n      name,\n      goal,\n      streak: 0,\n      createdAt: new Date().toISOString()\n    }]\n  })),\n  markComplete: (habitId, date = new Date().toISOString().split('T')[0]) => {\n    const state = get()\n    const dayCompletions = state.completions[date] || {}\n    set({\n      completions: {\n        ...state.completions,\n        [date]: { ...dayCompletions, [habitId]: true }\n      }\n    })\n  }\n}), { compress: true, key: 'habits' })",
          "benefits": ["Track personal progress", "Share habit templates", "Motivational sharing", "Cross-device tracking"]
        },
        "tags": ["habits", "personal", "tracking", "goals"],
        "difficulty": "beginner",
        "realWorldExamples": ["Habitica", "Streaks", "Way of Life"]
      }
    ],
    "specialized": [
      {
        "id": "recipe-planner",
        "title": "Meal Planning App",
        "description": "Plan meals, generate shopping lists, and share weekly menus.",
        "stateExample": {
          "weekPlan": {
            "monday": {"breakfast": "oatmeal", "lunch": "salad", "dinner": "pasta"},
            "tuesday": {"breakfast": "eggs", "lunch": "sandwich", "dinner": "stir-fry"}
          },
          "recipes": ["pasta-carbonara", "caesar-salad"],
          "shoppingList": ["eggs", "pasta", "cheese"],
          "dietaryRestrictions": ["vegetarian"]
        },
        "implementation": {
          "react": "const useMealPlanStore = create((set) => ({\n  weekPlan: {},\n  recipes: [],\n  shoppingList: [],\n  dietaryRestrictions: [],\n  setPlan: (day, meal, recipe) => set(state => ({\n    weekPlan: {\n      ...state.weekPlan,\n      [day]: { ...state.weekPlan[day], [meal]: recipe }\n    }\n  })),\n  addToShoppingList: (item) => set(state => ({\n    shoppingList: [...state.shoppingList, item]\n  })),\n  generateShoppingList: () => {\n    // Auto-generate from weekly plan\n  }\n}), { compress: true, key: 'meals' })",
          "benefits": ["Share meal plans", "Family meal coordination", "Recipe collections", "Shopping list sharing"]
        },
        "tags": ["food", "planning", "recipes", "family"],
        "difficulty": "beginner",
        "realWorldExamples": ["Mealime", "PlateJoy", "Paprika"]
      },
      {
        "id": "workout-tracker",
        "title": "Fitness Workout Logger",
        "description": "Track workouts, exercises, and progress with shareable routines.",
        "stateExample": {
          "currentWorkout": {
            "name": "Push Day",
            "exercises": [
              {"name": "Bench Press", "sets": [{"reps": 10, "weight": 135}]},
              {"name": "Push-ups", "sets": [{"reps": 20, "weight": 0}]}
            ]
          },
          "workoutHistory": [],
          "routines": ["Push Day", "Pull Day", "Leg Day"],
          "settings": {"weightUnit": "lbs", "restTimer": 90}
        },
        "implementation": {
          "react": "const useWorkoutStore = create((set) => ({\n  currentWorkout: null,\n  workoutHistory: [],\n  routines: [],\n  settings: { weightUnit: 'lbs', restTimer: 60 },\n  startWorkout: (routine) => set({ currentWorkout: routine }),\n  addSet: (exerciseIndex, set) => set(state => ({\n    currentWorkout: {\n      ...state.currentWorkout,\n      exercises: state.currentWorkout.exercises.map((ex, i) => \n        i === exerciseIndex \n          ? { ...ex, sets: [...ex.sets, set] }\n          : ex\n      )\n    }\n  })),\n  finishWorkout: () => set(state => ({\n    workoutHistory: [...state.workoutHistory, {\n      ...state.currentWorkout,\n      completedAt: new Date().toISOString()\n    }],\n    currentWorkout: null\n  }))\n}), { compress: true, key: 'workout' })",
          "benefits": ["Share workout routines", "Track progress over time", "Coach-athlete sharing", "Gym buddy coordination"]
        },
        "tags": ["fitness", "workout", "tracking", "health"],
        "difficulty": "intermediate",
        "realWorldExamples": ["Strong", "Jefit", "StrongApp"]
      }
    ]
  },
  "meta": {
    "version": "1.1.0",
    "lastUpdated": "2025-12-27",
    "totalUseCases": 21,
    "categories": [
      "paradigm_examples",
      "design_tools",
      "ecommerce", 
      "productivity",
      "ai_apps",
      "dashboards",
      "one_person_apps",
      "specialized"
    ],
    "difficultyLevels": {
      "beginner": "Simple state, basic features",
      "intermediate": "Complex state, multiple features", 
      "advanced": "Complex logic, performance considerations"
    }
  }
} 